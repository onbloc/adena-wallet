// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: gno/bank.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import Long from 'long';

export const protobufPackage = 'gno.bank';

/** MsgSend is the fund transfer tx message */
export interface MsgSend {
  /** the bech32 address of the fund sender */
  from_address: string;
  /** the bech32 address of the fund receiver */
  to_address: string;
  /** the denomination and amount of fund sent ("<amount><denomination>") */
  amount: string;
}

function createBaseMsgSend(): MsgSend {
  return { from_address: '', to_address: '', amount: '' };
}

export const MsgSend: MessageFns<MsgSend> = {
  encode(
    message: MsgSend,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.from_address !== '') {
      writer.uint32(10).string(message.from_address);
    }
    if (message.to_address !== '') {
      writer.uint32(18).string(message.to_address);
    }
    if (message.amount !== '') {
      writer.uint32(26).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSend {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.from_address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.to_address = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSend {
    return {
      from_address: isSet(object.from_address)
        ? globalThis.String(object.from_address)
        : '',
      to_address: isSet(object.to_address)
        ? globalThis.String(object.to_address)
        : '',
      amount: isSet(object.amount) ? globalThis.String(object.amount) : '',
    };
  },

  toJSON(message: MsgSend): unknown {
    const obj: any = {};
    if (message.from_address !== undefined) {
      obj.from_address = message.from_address;
    }
    if (message.to_address !== undefined) {
      obj.to_address = message.to_address;
    }
    if (message.amount !== undefined) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSend>, I>>(base?: I): MsgSend {
    return MsgSend.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSend>, I>>(object: I): MsgSend {
    const message = createBaseMsgSend();
    message.from_address = object.from_address ?? '';
    message.to_address = object.to_address ?? '';
    message.amount = object.amount ?? '';
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}